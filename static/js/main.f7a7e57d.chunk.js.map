{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","props","monsters","map","SearchBox","placeholder","handleChange","value","type","onChange","App","state","searchField","onChangeHandler","e","setState","target","fetch","then","res","json","users","this","filterMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAYeA,EATF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACX,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UACLC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACP,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCKLC,G,MAVE,SAACC,GACd,OACI,qBAAKP,UAAU,YAAf,SACKO,EAAMC,SAASC,KAAI,SAACV,GAAD,OAAa,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,WCSjDO,G,MAZG,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAC3C,OACI,uBACIb,UAAU,SACVc,KAAK,SACLH,YAAaA,EACbI,SAAUH,EACVC,MAAOA,MCwBJG,G,kNA5BXC,MAAQ,CACRT,SAAU,GACVU,YAAa,I,EAQfC,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CAAEH,YAAaE,EAAEE,OAAOT,S,uDANxC,WAAqB,IAAD,OAClBU,MAAM,8CAA8CC,MAAK,SAAAC,GAAG,OAC1DA,EAAIC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKN,SAAS,CAACb,SAAUmB,S,oBAMvD,WACE,MAAkCC,KAAKX,MAA/BT,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZW,EAAiBrB,EAASsB,QAAO,SAAC/B,GAAD,OAAYA,EAAQK,KAAK2B,cAAcC,SAASd,EAAYe,wBACnG,OACE,sBAAKjC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWW,YAAY,iBAAiBC,aAAcgB,KAAKT,gBAAiBN,MAAOe,KAAKX,MAAMC,cAC9F,cAAC,EAAD,CAAUV,SAAUqB,W,GArBVK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f7a7e57d.chunk.js","sourcesContent":["import React from 'react';\nimport \"./card.styles.css\"\n\nconst Card = ({monster}) => {\n    return <div className=\"card-container\">\n        <img alt='monster'\n            src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}/>\n        <h2>{monster.name}</h2>\n        <p>{monster.email}</p>\n    </div>\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../card/card.component';\nimport './card-list.styles.css';\nconst CardList = (props) => {\n    return (\n        <div className='card-list'>\n            {props.monsters.map((monster) => <Card key={monster.id} monster={monster}/>)}\n        \n        </div>\n    )\n\n}\n\nexport default CardList; ","import React from 'react'\nimport './search-box.styles.css';\n\nconst SearchBox = ({placeholder, handleChange, value}) => {\n    return (\n        <input\n            className=\"search\"\n            type=\"search\"\n            placeholder={placeholder}\n            onChange={handleChange}\n            value={value}\n           />\n    )\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react'\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n    monsters: [],\n    searchField: ''\n  }\n  \n  componentDidMount() { \n    fetch('https://jsonplaceholder.typicode.com/users').then(res =>\n      res.json()).then(users => this.setState({monsters: users}))\n  }\n\n  onChangeHandler = (e) => { \n    this.setState({ searchField: e.target.value })\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filterMonsters = monsters.filter((monster)=> monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox placeholder=\"Search Monster\" handleChange={this.onChangeHandler} value={this.state.searchField}/>\n        <CardList monsters={filterMonsters}/>\n       \n    </div>\n  );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}